using ITensors
using ITensorMPS
using Plots
# Construct the Heisenberg Hamiltonian as an MPO
function heisenberg_mpo(N; J=1.0, S="S=1/2")
    sites = siteinds(S, N)
    os = OpSum()
    for i in 1:N-1
        os += 0.5J, "S+", i, "S-", i+1
        os += 0.5J, "S-", i, "S+", i+1
        os += J, "Sz", i, "Sz", i+1
    end
    return MPO(os, sites), sites
end

# Run DMRG given an initial product state
function run_dmrg(H, psi0; maxdim=100, nsweeps=10)
    sweeps = Sweeps(nsweeps)
    setmaxdim!(sweeps, maxdim)
    energy, psi = dmrg(H, psi0, sweeps)
    return energy, psi
end

# Initialize state with fixed number of up spins (total Sz)
function initial_state_fixed_sz(sites, nup)
    N = length(sites)
    return [i <= nup ? "Up" : "Dn" for i in 1:N]
end


# Compute entanglement entropy across a bond
function entanglement_entropy(psi, b)
    svals = schmidtvals(psi, b)
    svals = svals[svals .> 1e-12]
    return -sum(svals.^2 .* log.(svals.^2))
end

#indicieissueabove? #-->The SVD on psi[b] is not guaranteed to be meaningful unless psi is left-orthogonalized up to site b.

#The link index logic might fail if linkind(psi, b-1) doesn't exist (for b=1 or edge cases).

#The way you extract the singular values (with diag(S)) may not work if S is a vector (which it often is in ITensor).

#Hereâ€™s a robust, standard way to calculate entanglement entropy at bond b in ITensor.jl:

#Left-orthogonalize to site b.

#SVD psi[b] over the bond connecting sites b-1 and b.

#The singular values are the Schmidt coefficient

# Main function to plot all analyses
function plot_all()

    # Setup single L for other analyses
    L = 10
    H, sites = heisenberg_mpo(L)
    psi0_gs = MPS(sites, initial_state_fixed_sz(sites, div(L,2)))
    _, psi_gs = run_dmrg(H, psi0_gs; maxdim=100)

    # 3. Entanglement Entropy S(bond)
    ent_entropy = [entanglement_entropy(psi_gs, b) for b in 2:L]
    plt3 = plot(2:L, ent_entropy, xlabel="Bond Index", ylabel="Entanglement Entropy",
        title="3. Entanglement Entropy", marker=:diamond, legend=false)

    # Arrange all plots
    plot(plt3, layout=(3,2), size=(1200,1000))
end

# Execute all plots
plot_all()
